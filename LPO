#!/usr/bin/perl -w

use warnings;
use strict;
use v5.10;

die "I need a file\n" if @ARGV == 0;
open(INPUT, "<", $ARGV[0]) or die "Impossible to open \"$ARGV[0]\"\n";

my $d;
my $line;
my $in;
my @entries;

$d = 1 if @ARGV > 1 && $ARGV[1] eq "-d";

while ($line = <INPUT>)
{
    $in .= $line;
}
close(INPUT);

@entries = split("\n",$in);

say "\n----------------DEBBUGER----------------" if $d;
say "\nINPUT:\n" if $d;
$, = "\n";
say @entries if $d;

$, = ", ";

say "\nREADING FILE:\n" if $d;

my %vars;
my $aux; 
my $claus;
my $var;
my @pred;
my @conds;

while (my $i = shift @entries)
{
    if ($i =~ m/([A-Z]+)\s*:\s*(\d+)\s+(\d+)/)
    {
        say $1 . " = {" . $2 . " ... " . $3 . "}" if $d;
        $vars{$1} = [$2, $3, "x"];
    }
    
    else 
    {   
        if ($i =~ 
           m/
                (
                    [-]?[a-z]+      # Name of the predicative

                    [(]
                    ([A-Z]+)\s*     # First parameter
                    (,\s*[A-Z]+)*   # Others parameters
                    [)]
                )+                  # One or more predicatives
                
                \s*[.]\s*           # End Of Predicatives
                
                (                   # Conditions
                    (
                        ([A-Z]+|\d+)\s*     # Variable or number 
                        (
                            [+-]\s*         # Operation applied
                            ([A-Z]+|\d+)\s* # Variable or number
                        )*
                                            
                        ([=<>]|!=)\s*   # Condition
                        
                        ([A-Z]+|\d+)\s*     # Variable or number 
                        (
                            [+-]\s*         # Operation applied
                            ([A-Z]+|\d+)\s* # Variable or number
                        )*
                    )+                    
                    [.]
                )?$
            /x
        )
        {
            $claus = "";
            while ($i =~ s/([-]?\w+[(][A-Z,\s]+[)])\s*//)
            {
                $claus .= $1 . " ";
            }
            say "\nclausule:" if $d;
            print "    " if $d;
            say $claus if $d;
            say "conditions: " if $d;
            
            while ($i =~ s/
                            ([A-Z]+|\d+)     # First term of the condition
                            (
                                \s*
                                [+-]         # Operation applied to the term
                                \s*
                                ([A-Z]+|\d+) # Operator applied to the term
                            )*               # Any number of operations
                            \s*
                            [=<>!]+          # Comparison Operator
                            \s*
                            ([A-Z]+|\d+)     # Second term of the condition
                            (
                                \s*
                                [+-]         # Operation applied to the term
                                \s*
                                ([A-Z]+|\d+) # Operator applied to the term
                            )*               # Any number of operations
                        //x)
            {
                print "    " if $d;
                say $& if $d;
                push(@conds, $&);
            }
            $claus =~ m/([A-Z]+)/;
            say "\nPRINTING:\n" if $d;
            die "Variable $1 wasn't declared" unless defined $vars{$1}; 
            insert($claus, $1, $vars{$1}[0], $vars{$1}[1], {%vars}, [@conds]);
            $aux = '$vars{$1}[0] - $vars{$1}[1]';
        }
        else{die "error";}
    }
    @conds = ();
}

sub insert
{
    my $clause = shift;
    my $var    = shift;
    my $min    = shift;
    my $max    = shift;
    my $vHash  = shift;
    my $checks = shift;
    my $aux;
    die "Variable $var wasn't declared" unless defined $$vHash{$var};
    for(my $i = $min; $i <= $max; $i++)
    {
        $$vHash{$var}[2] = $i;
        if(chkConditions($vHash, $checks))
        {
            $aux = $clause;
            $aux =~ s/$var/$i/g;
            if($aux =~ m/([A-Z]+)/)
            {
                insert($aux, $1, $vars{$1}[0], $vars{$1}[1], $vHash, $checks);
            }
            else 
            {
                print "to file -> " if $d;
                $aux =~ s/\s*$/./;
                say $aux;
            }
        }   
    }
    $$vHash{$var}[2] = 'x';
}

sub chkConditions
{
    my $vHash  = shift;
    my $checks = shift;
    foreach(@$checks)
    {
        when(/(.*)!=(.*)/)
        {
            return 0 if(!chk($1, $2, $vHash, $checks, "!"));
        }
        when(/(.*)<(.*)/)
        {
            return 0 if(!chk($1, $2, $vHash, $checks, "<"));
        }
        when(/(.*)>(.*)/)
        {
            return 0 if(!chk($1, $2, $vHash, $checks, ">"));
        }
        when(/(.*)=(.*)/)
        {
            return 0 if(!chk($1, $2, $vHash, $checks, "="));
        }
    }
    return 1;
}

sub chk
{
    my $left   = shift;
    my $right  = shift;
    my $vHash  = shift;
    my $checks = shift;
    my $op     = shift;
    my $first = 0;
    my $second = 0;
    my $plus = 1;
    while($left =~ s/([A-Z]+|\d+)//)
    {
        if(defined $$vHash{$1})
        {
            return 1 if $$vHash{$1}[2] eq 'x';
            $first += $$vHash{$1}[2]*$plus;
        }
        else
        {
            $first += $1*$plus;
        }
        if($left =~ s/([+-])//)
        {
            $plus = +1 if $1 eq '+';
            $plus = -1 if $1 eq '-';
        }
    }
    $plus = 1;
    while($right =~ s/([A-Z]+|\d+)//)
    {
        if(defined $$vHash{$1})
        {
            return 1 if $$vHash{$1}[2] eq 'x';
            $second += $$vHash{$1}[2]*$plus;
        }
        else
        {
            $second += $1*$plus;
        }
        if($right =~ s/([+-])//)
        {
            $plus = +1 if $1 eq '+';
            $plus = -1 if $1 eq '-';
        }
    }
    given($op)
    {
        when("=")
        {
            return $first == $second;
        }
        when("<")
        {
            return $first <  $second;
        }
        when(">")
        {
            return $first >  $second;
        }
        when("!")
        {
            return $first != $second;
        }
    }
    return 0;
}
